
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import static javax.swing.JFileChooser.FILES_ONLY;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.SimpleAttributeSet;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Lenovo
 */
public class DarkNote extends javax.swing.JFrame {

    private static void setCharacterAttributes(SimpleAttributeSet attr, boolean b) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * Creates new form DarkNote
     */
    public DarkNote() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jColorChooser = new javax.swing.JColorChooser();
        jFileChooser = new javax.swing.JFileChooser();
        statusKenttä = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        JTextPane = new javax.swing.JTextPane();
        jBtnKello = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuTiedosto = new javax.swing.JMenu();
        jMenuUusi = new javax.swing.JMenuItem();
        jMenuAvaa = new javax.swing.JMenuItem();
        jMenuTallenna = new javax.swing.JMenuItem();
        jMenuTulosta = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuLopeta = new javax.swing.JMenuItem();
        jMenuMuokkaa = new javax.swing.JMenu();
        jMenuKopioi = new javax.swing.JMenuItem();
        jMenuLiitä = new javax.swing.JMenuItem();
        jMenuLeikkaa = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuPoista = new javax.swing.JMenuItem();
        jMenuKaikki = new javax.swing.JMenuItem();
        MenuMuotoile = new javax.swing.JMenu();
        jMenuFontti = new javax.swing.JMenuItem();
        jMenuVari = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuYo = new javax.swing.JMenuItem();
        jMenuPaiva = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("DarkNote");
        setBackground(new java.awt.Color(0, 0, 0));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        setForeground(new java.awt.Color(0, 0, 0));
        setName("DarNote"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        statusKenttä.setEditable(false);
        statusKenttä.setBackground(new java.awt.Color(0, 0, 0));
        statusKenttä.setForeground(new java.awt.Color(255, 255, 153));
        statusKenttä.setBorder(null);
        statusKenttä.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusKenttäActionPerformed(evt);
            }
        });

        jScrollPane2.setBorder(null);

        JTextPane.setBackground(new java.awt.Color(0, 0, 0));
        JTextPane.setBorder(null);
        JTextPane.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        JTextPane.setForeground(new java.awt.Color(255, 255, 255));
        JTextPane.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPane2.setViewportView(JTextPane);

        jBtnKello.setText("Kello");
        jBtnKello.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnKelloActionPerformed(evt);
            }
        });

        jMenuBar.setBackground(new java.awt.Color(0, 0, 0));
        jMenuBar.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(217, 175, 55)));
        jMenuBar.setForeground(new java.awt.Color(217, 175, 55));
        jMenuBar.setOpaque(true);

        jMenuTiedosto.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0, new java.awt.Color(204, 204, 204)));
        jMenuTiedosto.setForeground(new java.awt.Color(217, 175, 55));
        jMenuTiedosto.setText("Tiedosto");
        jMenuTiedosto.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N

        jMenuUusi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuUusi.setText("Uusi");
        jMenuUusi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuUusiActionPerformed(evt);
            }
        });
        jMenuTiedosto.add(jMenuUusi);

        jMenuAvaa.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuAvaa.setText("Avaa");
        jMenuAvaa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAvaaActionPerformed(evt);
            }
        });
        jMenuTiedosto.add(jMenuAvaa);

        jMenuTallenna.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuTallenna.setText("Tallenna");
        jMenuTallenna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTallennaActionPerformed(evt);
            }
        });
        jMenuTiedosto.add(jMenuTallenna);

        jMenuTulosta.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuTulosta.setText("Tulosta");
        jMenuTulosta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTulostaActionPerformed(evt);
            }
        });
        jMenuTiedosto.add(jMenuTulosta);
        jMenuTiedosto.add(jSeparator1);

        jMenuLopeta.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuLopeta.setText("Lopeta");
        jMenuLopeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuLopetaActionPerformed(evt);
            }
        });
        jMenuTiedosto.add(jMenuLopeta);

        jMenuBar.add(jMenuTiedosto);

        jMenuMuokkaa.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0, new java.awt.Color(204, 204, 204)));
        jMenuMuokkaa.setForeground(new java.awt.Color(217, 175, 55));
        jMenuMuokkaa.setText("Muokkaa");
        jMenuMuokkaa.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N

        jMenuKopioi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuKopioi.setText("Kopioi");
        jMenuKopioi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuKopioiActionPerformed(evt);
            }
        });
        jMenuMuokkaa.add(jMenuKopioi);

        jMenuLiitä.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuLiitä.setText("Liitä");
        jMenuLiitä.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuLiitäActionPerformed(evt);
            }
        });
        jMenuMuokkaa.add(jMenuLiitä);

        jMenuLeikkaa.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuLeikkaa.setText("Leikkaa");
        jMenuLeikkaa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuLeikkaaActionPerformed(evt);
            }
        });
        jMenuMuokkaa.add(jMenuLeikkaa);
        jMenuMuokkaa.add(jSeparator2);

        jMenuPoista.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        jMenuPoista.setText("Poista");
        jMenuMuokkaa.add(jMenuPoista);

        jMenuKaikki.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuKaikki.setText("Valitse kaikki");
        jMenuKaikki.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuKaikkiActionPerformed(evt);
            }
        });
        jMenuMuokkaa.add(jMenuKaikki);

        jMenuBar.add(jMenuMuokkaa);

        MenuMuotoile.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0, new java.awt.Color(204, 204, 204)));
        MenuMuotoile.setForeground(new java.awt.Color(217, 175, 55));
        MenuMuotoile.setText("Muotoile");
        MenuMuotoile.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N

        jMenuFontti.setText("Fontti");
        jMenuFontti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFonttiActionPerformed(evt);
            }
        });
        MenuMuotoile.add(jMenuFontti);

        jMenuVari.setText("Fontin väri...");
        jMenuVari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuVariActionPerformed(evt);
            }
        });
        MenuMuotoile.add(jMenuVari);
        MenuMuotoile.add(jSeparator3);

        jMenuYo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        jMenuYo.setText("Yötila");
        jMenuYo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuYoActionPerformed(evt);
            }
        });
        MenuMuotoile.add(jMenuYo);

        jMenuPaiva.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        jMenuPaiva.setText("Päivätila");
        jMenuPaiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPaivaActionPerformed(evt);
            }
        });
        MenuMuotoile.add(jMenuPaiva);

        jMenuBar.add(MenuMuotoile);

        setJMenuBar(jMenuBar);
        jMenuBar.getAccessibleContext().setAccessibleName("");
        jMenuBar.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addComponent(statusKenttä, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jBtnKello))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusKenttä, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(jBtnKello, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void jMenuUusiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuUusiActionPerformed
        
        // Ennen uuden avaamista tarkistetaan, ettei tuhota mitään tallentamatonta
        
        if (JTextPane.getText().isEmpty() == false) {
            int response = JOptionPane.showConfirmDialog(null, "Tallennetaanko muutokset?", "DarkNote", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

            // Yes7no valintojen perusteella tyhjennetään tekstikenttä, eli "luodaan" uusi tiedosto, kun valitaan uusi tai käytetään pikanäppäintä ctrl + n 
                   
            switch (response) {
                case JOptionPane.NO_OPTION:
                    JTextPane.setText("");
                    break;
                
                case JOptionPane.YES_OPTION:
                    jMenuTallennaActionPerformed(evt);
                    JTextPane.setText("");
                    break;
               
                case JOptionPane.CANCEL_OPTION:
                    break;
                default:
                    break;
            }
        }
            // Päivitetään statuskenttä vastaamaan uutta tiedostoa
            
        statusKenttä.setText("Uusi tiedosto: Nimetön.txt ");
    }//GEN-LAST:event_jMenuUusiActionPerformed

    private void jMenuLopetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuLopetaActionPerformed
      
        // Ennen lopetusta tarkistetaan, ettei ole tallentamatonta työtä
        
        if (JTextPane.getText().isEmpty() == false) {
            int response = JOptionPane.showConfirmDialog(null, "Tallennetaanko muutokset?", "DarkNote", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (response == JOptionPane.NO_OPTION) {
                
                // Lopetusmetodi
                
                System.exit(0);
            } else if (response == JOptionPane.YES_OPTION) {
                jMenuTallennaActionPerformed(evt);
            }
        } else {
            System.exit(0);
        }

    }//GEN-LAST:event_jMenuLopetaActionPerformed

    private void jMenuTallennaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTallennaActionPerformed
               
        // Tallennus oletusarvoisesti C:n juureen ja .txt päätteellä
        
        JFileChooser tallenna = new JFileChooser("C:/");
        int chooserValue = tallenna.showSaveDialog(this);
        if (chooserValue == JFileChooser.APPROVE_OPTION) {
            try {
                
        // Haetaan tekstikentässä oleva teksti tallennusta varten
            
            PrintWriter fileOut = new PrintWriter(tallenna.getSelectedFile() + ".txt");
                fileOut.print(JTextPane.getText());
                 fileOut.close();              
                
        // Näytetään tiedostopolku status-kentässä
        
                statusKenttä.setText("Tallennettu " + tallenna.getSelectedFile().getAbsolutePath());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DarkNote.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
            

    }//GEN-LAST:event_jMenuTallennaActionPerformed

    private void jMenuAvaaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAvaaActionPerformed
        
        // Ennen avaamista, varmistetaan onko alue tyhjä, ja suoritetaan tiedoston avaus oletusarvoisesti C:n juuresta
        
        if (JTextPane.getText().isEmpty() == true) {
            try {
                JFileChooser avaa = new JFileChooser("C:/");
                
                // Näytetään tuetut tiedostomuodot
                
                avaa.setFileSelectionMode(FILES_ONLY);
                avaa.addChoosableFileFilter(new FileNameExtensionFilter("txt", "txt"));
                avaa.addChoosableFileFilter(new FileNameExtensionFilter("docx", "docx"));
                avaa.addChoosableFileFilter(new FileNameExtensionFilter("doc", "doc"));
                avaa.addChoosableFileFilter(new FileNameExtensionFilter("java", "java"));
                avaa.setAcceptAllFileFilterUsed(true);

                int re = avaa.showOpenDialog(this);

                // Varmistetaan ettei ole avoimena tallentamatonta työtä
                
                if (re == JFileChooser.APPROVE_OPTION) {
                    
                    // Bufferoidaan avattu tiedosto ja näytetään tekstikentässä
                    
                    File avaaTiedosto = avaa.getSelectedFile();
                    FileReader fr = new FileReader(avaaTiedosto);
                    try ( BufferedReader br = new BufferedReader(fr)) {
                        JTextPane.read(br, null);
                        
                        // Päivitetään statuskenttä vastaamaan avattua tiedostoa
                        statusKenttä.setText("Avattu: " + avaa.getSelectedFile().getAbsolutePath());
                    }
                }

            } catch (HeadlessException | IOException e) {

            }
        } else {

            int response = JOptionPane.showConfirmDialog(null, "Tallennetaanko muutokset?", "DarkNote", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (response == JOptionPane.NO_OPTION) {
                JTextPane.setText("");
                jMenuAvaaActionPerformed(evt);
            } else if (response == JOptionPane.YES_OPTION) {
                jMenuTallennaActionPerformed(evt);
                JTextPane.setText("");
                jMenuAvaaActionPerformed(evt);
            }
        }


    }//GEN-LAST:event_jMenuAvaaActionPerformed

    private void jMenuKopioiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuKopioiActionPerformed
                
        // Kopiointimetodin käyttö klikatessa kopiointia tai käytettäessä pikanäppäintä ctrl + s
        
        JTextPane.copy();

    }//GEN-LAST:event_jMenuKopioiActionPerformed

    private void jMenuLiitäActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuLiitäActionPerformed
                
        // Liitämetodin käyttö klikatessa liitä-nappia tai käytettäessä pikanäppäintä ctrl + v
        
        JTextPane.paste();
    }//GEN-LAST:event_jMenuLiitäActionPerformed

    private void jMenuLeikkaaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuLeikkaaActionPerformed
                
        // Leikkaametodin käyttö klikatessa leikkaa-nappia tai käytettäessä pikanäppäintä ctrl + x
        
        JTextPane.cut();
    }//GEN-LAST:event_jMenuLeikkaaActionPerformed

    private void jMenuKaikkiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuKaikkiActionPerformed
        
        // Alueenvalinta-metodin käyttä klikatessa valitse kaikki, tai käytettäessä pikanäppäintä ctrl + a
        
        JTextPane.selectAll();
    }//GEN-LAST:event_jMenuKaikkiActionPerformed

    private void jMenuTulostaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTulostaActionPerformed
       
          // Tekstialueen vienti tulostimelle
        try {
            JTextPane.print();
        } catch (PrinterException ex) {
            Logger.getLogger(DarkNote.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuTulostaActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
                
        // Ohjelman sisäinen rastiruutu-poistuminen on korvattu omalla poistumismetodilla
        // Ennen sulkemista varmistetaan muutokset ja tallennus
        
        if (JTextPane.getText().isEmpty() == false) {
            int response = JOptionPane.showConfirmDialog(null, "Tallennetaanko muutokset?", "DarkNote", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (response == JOptionPane.NO_OPTION) {
                System.exit(0);
            } else if (response == JOptionPane.YES_OPTION) {
            }
        } else {
            System.exit(0);
        }

    }//GEN-LAST:event_formWindowClosing

    private void statusKenttäActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusKenttäActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusKenttäActionPerformed

    private void jMenuFonttiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFonttiActionPerformed
       

        // Käytetään kolmannen osapuolen tekemää fonttivalikkoa fontin valintaan ja määrittelyyn
        // https://www.codeproject.com/Articles/34966/Create-a-Font-Dialog-With-Java
        
        JFontChooser fd = new JFontChooser(this, JTextPane.getFont());
        fd.setVisible(true);
        if (fd.getReturnStatus() == JFontChooser.RET_OK) {
            JTextPane.setFont(fd.getFont());
        }
        fd.dispose();


    }//GEN-LAST:event_jMenuFonttiActionPerformed

    private void jMenuVariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuVariActionPerformed
        
        // Fontin värin valinta ColorChooserilla
        
        Color newColor = JColorChooser.showDialog(JTextPane, "Valitse väri",
                Color.WHITE);
        if (newColor == null) {

            return;
        }
        JTextPane.setForeground(newColor);

    }//GEN-LAST:event_jMenuVariActionPerformed

    private void jMenuYoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuYoActionPerformed
        
        // Moden vaihto ja värien määritys yö-tilaan
        
        jMenuBar.setBackground(new java.awt.Color(0, 0, 0));                //Menu taustaväri
        jMenuBar.setForeground(new java.awt.Color(217, 175, 55));           //Menu tekstin väri  
        JTextPane.setBackground(new java.awt.Color(0, 0, 0));               //Kirjoitusalueen taustaväri
        JTextPane.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N     //Kirjoitusalueen fontti
        JTextPane.setForeground(new java.awt.Color(255, 255, 255));         //Kirjoitusalueen fontin väri
        JTextPane.setDisabledTextColor(new java.awt.Color(0, 0, 0));        //Poistettu värivalinta
        statusKenttä.setBackground(new java.awt.Color(0, 0, 0));            //Statuskentän taustaväri
        statusKenttä.setForeground(new java.awt.Color(255, 255, 153));      //Statuskentän fonttiväri


    }//GEN-LAST:event_jMenuYoActionPerformed

    private void jMenuPaivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuPaivaActionPerformed
        
        // Moden vaihto ja värien määritys päivätilaan
        
        jMenuBar.setBackground(new java.awt.Color(255, 255, 255));          //Menu taustaväri
        jMenuBar.setForeground(new java.awt.Color(0, 0, 0));                //Menu tekstin väri
        JTextPane.setBackground(new java.awt.Color(255, 255, 255));         //Kirjoitusalueen taustaväri
        JTextPane.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N     //Kirjoitusalueen fontti
        JTextPane.setForeground(new java.awt.Color(0, 0, 0));               //Kirjoitusalueen fontin väri
        JTextPane.setDisabledTextColor(new java.awt.Color(255, 255, 255));  //Poistettu värivalinta
        statusKenttä.setBackground(new java.awt.Color(255, 255, 255));      //Statuskentän taustaväri
        statusKenttä.setForeground(new java.awt.Color(0, 0, 0));      //Statuskentän fonttiväri


    }//GEN-LAST:event_jMenuPaivaActionPerformed

    private void jBtnKelloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnKelloActionPerformed
                
        // Ajan näyttö painikkeessa, aika otetaan käyttöjärjestelmästä
        
        int delay = 100;
        Timer timer = new Timer(delay, (ActionEvent e) -> {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            jBtnKello.setText(formattedDateTime);
        });

        timer.start();
    }//GEN-LAST:event_jBtnKelloActionPerformed
            // Oletusteeman (Look and feel setting code) teemaksi vaihdettu FlatLightLaf
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("FlatLightLaf".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DarkNote.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DarkNote.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DarkNote.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DarkNote.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new DarkNote().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane JTextPane;
    private javax.swing.JMenu MenuMuotoile;
    private javax.swing.JButton jBtnKello;
    private javax.swing.JColorChooser jColorChooser;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JMenuItem jMenuAvaa;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuItem jMenuFontti;
    private javax.swing.JMenuItem jMenuKaikki;
    private javax.swing.JMenuItem jMenuKopioi;
    private javax.swing.JMenuItem jMenuLeikkaa;
    private javax.swing.JMenuItem jMenuLiitä;
    private javax.swing.JMenuItem jMenuLopeta;
    private javax.swing.JMenu jMenuMuokkaa;
    private javax.swing.JMenuItem jMenuPaiva;
    private javax.swing.JMenuItem jMenuPoista;
    private javax.swing.JMenuItem jMenuTallenna;
    private javax.swing.JMenu jMenuTiedosto;
    private javax.swing.JMenuItem jMenuTulosta;
    private javax.swing.JMenuItem jMenuUusi;
    private javax.swing.JMenuItem jMenuVari;
    private javax.swing.JMenuItem jMenuYo;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JTextField statusKenttä;
    // End of variables declaration//GEN-END:variables

    private void setJTextPaneFont(Font font) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

}
